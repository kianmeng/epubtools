<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/" 
  xmlns:cx="http://xmlcalabash.com/ns/extensions"
  xmlns:c="http://www.w3.org/ns/xproc-step" 
  xmlns:css="http://www.w3.org/1996/css"
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:tr="http://transpect.io" 
  xmlns:svg="http://www.w3.org/2000/svg" 
  xmlns:smil="http://www.w3.org/ns/SMIL"
  xmlns:mml="http://www.w3.org/1998/Math/MathML"
  version="2.0">
  
  <xsl:import href="functions.xsl"/>
    
  <xsl:param name="targetdir"/>
  <xsl:param name="css-handling"/>

  <!-- This template is used to extract a file list from the references of an xhtml file -->

  <xsl:template match="c:file" mode="add-query-string-if-ambiguous-name">
    <xsl:param name="all-files" as="element(c:file)+"/>
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:if test="@name = ($all-files except current())/@name">
        <xsl:attribute name="query-string" select="index-of(for $i in $all-files return generate-id($i), generate-id(current()))"/>
      </xsl:if>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="/" exclude-result-prefixes="tr ncx html xsl">
    <xsl:variable name="root" select="." as="document-node(element(html:html))"/>

    <cx:document>

      <!-- extract xhtml file refs from media tags and external files such as js scripts. 
        css files are automatically generated by xproc step css-generate since there are some changes of file paths necessary -->

      <xsl:variable name="smil-file-uri" as="xs:string" select="replace(html:html/base-uri(), '\.x?html$', '.raw.smil', 'i')"/>
      <xsl:variable name="fileref-elements"
        select="  collection()//html:*[local-name() = ('img', 'video', 'audio', 'source', 'script', 'object')]
                | collection()/html:html/html:head/html:link[@href][$css-handling = 'unchanged' or not(@type eq 'text/css')]
                | collection()/html:html/html:body//svg:svg//svg:image
                | collection()/html:html/html:body//mml:math
                | (if (doc-available($smil-file-uri)) 
                   then doc($smil-file-uri)/smil:smil/smil:body//smil:par/smil:audio 
                   else ())"
        as="element(*)*"/>
      <xsl:variable name="uri-atts" select="for $i in $fileref-elements 
                                            return $i/@xlink:href
                                                  |$i/@src
                                                  |$i/@data
                                                  |$i/@poster
                                                  |$i/@href
                                                  |$i/@altimg" as="attribute(*)*"/>
      <xsl:for-each select="$uri-atts[not(normalize-space())]">
        <xsl:message select="'WARNING: Empty URI in ', .."/>
      </xsl:for-each>
      <xsl:variable name="fileref-distinct-values"
        select="tr:sort(distinct-values( $uri-atts[normalize-space()]))"
        as="xs:string*"/>
      
      <xsl:message select="concat('&#xa;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xa;',
        'EXTRACT FILEREFS FROM HTML SOURCE FILE:&#xa;&#xa;',
        string-join($fileref-distinct-values, '&#xa;'),
        '&#xa;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')"/>
      <xsl:variable name="prelim-list" as="element(c:file)*">
        <xsl:for-each select="$fileref-distinct-values">
          <c:file>
            <xsl:sequence select="tr:parse-url(., $targetdir, $root)"/>
          </c:file>
        </xsl:for-each>
      </xsl:variable>
      
      <xsl:apply-templates select="$prelim-list" mode="add-query-string-if-ambiguous-name">
        <xsl:with-param name="all-files" select="$prelim-list"/>
      </xsl:apply-templates>
      
      <!-- process css resources using css-expands xml-representation -->
<!--      <xsl:message select="concat('&#xa;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xa;',
        'FOUND CSS FILE REFERENCES:&#xa;&#xa;', 
        string-join( for $i in collection()//css:resource return tr:patch-fileref($i/@src), '&#xa;'), 
        '&#xa;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        )"/>-->
      <xsl:for-each-group select="collection()//css:resource" group-by="@src">
        <c:file>
          <xsl:sequence select="tr:parse-url(@src, $targetdir, $root)"/>
        </c:file>
      </xsl:for-each-group>
      
    </cx:document>

  </xsl:template>

</xsl:stylesheet>